##List of all installed applications on a Windows device
##This one-liner searches the Windows Registry to identify installed applications. It will display the version, publisher, and install date in a formatted table. You can output to a text file by simply adding > output.txt
##This one-liner will also list all installed Windows Updates files (KB)

#PowerShell
Get-ItemProperty HKLM:\Software\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate | Format-Table –AutoSize  

##Get all installed KB numbers from Windows Update
##Similar to the first one-liner, this script will only return the installed KB patches on a Windows device.

#PowerShell
$wu = new-object -com “Microsoft.Update.Searcher”
$totalupdates = $wu.GetTotalHistoryCount()
$all = $wu.QueryHistory(0,$totalupdates)
$OutputCollection= @()
Foreach ($update in $all)
{
$string = $update.title
$Regex = “KB\d*”
$KB = $string | Select-String -Pattern $regex | Select-Object {$_.Matches }
$output = New-Object -TypeName PSobject
$output | add-member NoteProperty “HotFixID” -value $KB.‘ $_.Matches ‘.Value
$output | add-member NoteProperty “Title” -value $string
$OutputCollection += $output
}
$OutputCollection | Sort-Object HotFixID | Format-Table -AutoSize
Write-Host “$($OutputCollection.Count) Updates Found” 

##Find Admin Shares on my computer
##This great little oneline uses RegEx to find local admin shares

#PowerShell
Gwmi Win32_Share|%{"\\$($_|% P*e)\$($_.Name)"}

##Find Scheduled tasks that are running
##Useful if you want to know what a server tasks are

#PowerShell
 (get-scheduledtask).where({$_.state -eq 'running'}) 

##Find files
##Find any file on a filesystem.

##This script will look for the host.bak file in C:\Window, the account I have used does not have permission to view everything in C:\Windows, there i use -ErrorAction SilentlyContinue to make the output much easier to read

#PowerShell
 Get-Childitem -Path C:\windows -Recurse -Filter hosts.bak -ErrorAction SilentlyContinue

##Output NOT using SilentlyContinue
##This script will recursively search the path C:\Temp for all filenames containing .log

#PowerShell
 Get-ChildItem -path C:\temp\ -Recurse -Filter .log

##Find the Last Bootup Time
##This is a really useful one-liner that can be run directly from the server, or you can run it against multiple servers

##PowerShell
Get-WmiObject win32_operatingsystem |select @{Name="Last Boot Time"; Expression={$_.ConvertToDateTime($_.LastBootUpTime)}}, PSComputerName
Use the property -computername to target other nodes

##Free Disk space information
##This great little one-liner will give you the disk space of your local machine in a value and percentage. You can also pipe computer names to the one-liner to check multiple computers.

##PowerShell
gwmi Win32_LogicalDisk -Filter "DeviceID='C:'" | Select Name, FileSystem,FreeSpace,BlockSize,Size | % {$_.BlockSize=(($_.FreeSpace)/($_.Size))*100;$_.FreeSpace=($_.FreeSpace/1GB);$_.Size=($_.Size/1GB);$_}| Format-Table Name, @{n='FS';e={$_.FileSystem}},@{n='Free, Gb';e={'{0:N2}'-f $_.FreeSpace}}, @{n='Free,%';e={'{0:N2}'-f $_.BlockSize}} -AutoSize

##or you can use this:

##PowerShell
Get-PSDrive -PSProvider filesystem | where-object {$_.used -gt 0} |select-Object -property Root,@{name="SizeGB";expression={($_.used+$_.free)/1GB -as [int]}}, @{name="UsedGB";expression={($_.used/1GB) -as [int]}}, @{name="FreeGB";expression={($_.free/1GB) -as [int]}}, @{name="PctFree";expression={[math]::round(($_.free/($_.used+$_.free))*100,2)}}

##Find out how big a folder is
##This useful oneliner will tell you how big the temp folder is, including the biggest file, average size, and total size.

#PowerShell
dir -path C:\Scripts -file -recurse -force | measure-object length -sum -max -average | Select-Object @{name="Total Files";Expression={$_.count}},@{name="Largest File(MB)";Expression={"{0:F2}" -f ($_.maximum/1MB)}},@{name="Average Size(MB)";Expression={"{0:F2}" -f ($_.average/1MB)}},@{name="Total Size(MB)";Expression={"{0:F2}" -f ($_.sum/1MB)}}

##Active Directory Bulk Add Users
##This one-liner can require RSAT directory services installed locally or run on a Domain Controller.

##Find all users who have not logged in for the past 90 days, disable their accounts, and move them to an organizational unit (OU)

##PowerShell
Get-ADUser -Filter {(Enabled -eq $True) -and (LastLogonDate -lt (Get-Date).AddDays(-90))} | ForEach-Object { Disable-ADAccount $_.SamAccountName; Move-ADObject $_.DistinguishedName -TargetPath "OU=Disabled Users,DC=mydomain,DC=com" }
##Extract all unique IP addresses from a log file and display the top 10 most frequently occurring ones.
##PowerShell
Get-Content C:\MyLogFile.log | Select-String -Pattern "\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}" | Select-Object -ExpandProperty Matches | Select-Object -ExpandProperty Value | Sort-Object | Get-Unique | Group-Object | Sort-Object -Property Count -Descending | Select-Object -First 10
##Monitor a folder for changes and send an email notification whenever a new file is created.
##PowerShell
$folder = "C:\MyFolder"
$watcher = New-Object System.IO.FileSystemWatcher
$watcher.Path = $folder
$watcher.IncludeSubdirectories = $false
$watcher.EnableRaisingEvents = $true
$action = {
    $body = "A new file has been created in $folder."
    $params = @{
        To = "youremail@yourdomain.com"
        From = "powershell@yourdomain.com"
        Subject = "New file in $folder"
        Body = $body
        SmtpServer = "smtp.yourdomain.com"
    }
    Send-MailMessage @params
}
$created = Register-ObjectEvent $watcher "Created" -Action $action

##Create a report of all mailbox sizes in an Exchange server and export it to a CSV file.
##PowerShell
Get-MailboxStatistics -Server "MyExchangeServer" | Select-Object DisplayName, TotalItemSize, ItemCount | Sort-Object TotalItemSize -Descending | Export-Csv -Path C:\MailboxReport.csv -NoTypeInformation

##Monitor a website for availability and send an email notification whenever it goes down.
##PowerShell
$url = "https://www.example.com"
$interval = 60 # seconds
while ($true) {
    try {
        Invoke-WebRequest -Uri $url -UseBasicParsing -TimeoutSec 30 | Out-Null
        Write-Host "$url is up."
    }
    catch {
        $body = "$url is down. Error message: $_."
        $params = @{
            To = "youremail@yourdomain.com"
            From = "powershell@yourdomain.com"
            Subject = "$url is down"
            Body = $body
            SmtpServer = "smtp.yourdomain.com"
        }
        Send-MailMessage @params
    }
    Start-Sleep -Seconds $interval
}

##Find all the processes that are using a specific port.
##PowerShell
Get-NetTCPConnection | Where-Object { $_.LocalPort -eq 80 } | Select-Object OwningProcess, RemoteAddress, RemotePort | Sort-Object OwningProcess | Get-Unique

##Create a script that retrieves the latest tweets from a list of Twitter users and sends an email notification:
##PowerShell
$users = "user1", "user2", "user3"
$consumerKey = "yourConsumerKey"
$consumerSecret = "yourConsumerSecret"
$accessToken = "yourAccessToken"
$accessTokenSecret = "yourAccessTokenSecret"
$tweets = $users | ForEach-Object {
    $oauth = New-Object -TypeName 'LinqToTwitter.TwitterContext' -ArgumentList $authorizer
    $statuses = $oauth.Status.Where([LinqToTwitter.StatusExtensions]::UserIs($users)) | Select-Object -First 5 | Select-Object User, Text, CreatedAt
}
$body = $tweets | Format-Table -AutoSize | Out-String
$params = @{
    To = "youremail@yourdomain.com"
    From = "powershell@yourdomain.com"
    Subject = "Latest Tweets"
    Body = $body
    SmtpServer = "smtp.yourdomain.com"
}
Send-MailMessage @params
